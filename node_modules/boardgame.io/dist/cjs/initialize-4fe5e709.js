'use strict';

var reducer = require('./reducer-c8fe777c.js');
var flatted = require('flatted');

/**
 * InitializeGame
 *
 * Creates the initial game state.
 *
 * @param {...object} game - Return value of Game().
 * @param {...object} numPlayers - The number of players.
 * @param {...object} multiplayer - Set to true if we are in a multiplayer client.
 */

function InitializeGame(_ref) {
  var game = _ref.game,
      numPlayers = _ref.numPlayers,
      setupData = _ref.setupData;
  game = reducer.Game(game);

  if (!numPlayers) {
    numPlayers = 2;
  }

  var ctx = game.flow.ctx(numPlayers);
  var seed = game.seed;

  if (seed === undefined) {
    seed = reducer.Random.seed();
  }

  ctx._random = {
    seed: seed
  }; // Pass ctx through all the plugins that want to modify it.

  ctx = reducer.Setup.ctx(ctx, game); // Augment ctx with the enhancers (TODO: move these into plugins).

  var apiCtx = new reducer.ContextEnhancer(ctx, game, ctx.currentPlayer);
  var ctxWithAPI = apiCtx.attachToContext(ctx);
  var initialG = game.setup(ctxWithAPI, setupData); // Pass G through all the plugins that want to modify it.

  initialG = reducer.Setup.G(initialG, ctxWithAPI, game);
  var initial = {
    // User managed state.
    G: initialG,
    // Framework managed state.
    ctx: ctx,
    // List of {G, ctx} pairs that can be undone.
    _undo: [],
    // List of {G, ctx} pairs that can be redone.
    _redo: [],
    // A monotonically non-decreasing ID to ensure that
    // state updates are only allowed from clients that
    // are at the same version that the server.
    _stateID: 0,
    // A snapshot of this object so that actions can be
    // replayed over it to view old snapshots.
    // TODO: This will no longer be necessary once the
    // log stops replaying actions (but reads the actual
    // game states instead).
    _initial: {}
  };
  var state = game.flow.init({
    G: initial.G,
    ctx: ctxWithAPI
  });
  initial.G = state.G;
  initial._undo = state._undo;
  state = apiCtx.updateAndDetach(state, true);
  initial.ctx = state.ctx;

  var deepCopy = function deepCopy(obj) {
    return flatted.parse(flatted.stringify(obj));
  };

  initial._initial = deepCopy(initial);
  return initial;
}

exports.InitializeGame = InitializeGame;
