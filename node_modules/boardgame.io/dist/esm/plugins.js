import { a as _objectSpread2, f as _defineProperty, d as _objectWithoutProperties } from './_rollupPluginBabelHelpers-b44b7feb.js';

/*
 * Copyright 2018 The boardgame.io Authors
 *
 * Use of this source code is governed by a MIT-style
 * license that can be found in the LICENSE file or at
 * https://opensource.org/licenses/MIT.
 */

/**
 * Plugin that maintains state for each player in G.players.
 * During a turn, G.player will contain the object for the current player.
 * In two player games, G.opponent will contain the object for the other player.
 *
 * @param {function} initPlayerState - Function of type (playerID) => playerState.
 */
var pluginPlayer = {
  fnWrap: function fnWrap(moveFn) {
    return function (G, ctx) {
      var current = ctx.currentPlayer;
      var player = G.players[current];
      G = _objectSpread2({}, G, {
        player: player
      });
      var other = null;
      var opponent = null;

      if (ctx.numPlayers == 2) {
        other = current == '0' ? '1' : '0';
        opponent = G.players[other];
        G.opponent = opponent;
      }

      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      G = moveFn.apply(void 0, [G, ctx].concat(args));

      var players = _objectSpread2({}, G.players, _defineProperty({}, current, 'player' in G ? G.player : G.players[current]));

      if (other !== null) {
        players[other] = 'opponent' in G ? G.opponent : G.players[other];
      }

      {
        /* eslint-disable-next-line no-unused-vars */
        var _G = G,
            _player = _G.player,
            _opponent = _G.opponent,
            rest = _objectWithoutProperties(_G, ["player", "opponent"]);

        return _objectSpread2({}, rest, {
          players: players
        });
      }
    };
  },
  setup: {
    G: function G(_G2, ctx, game) {
      var players = {};

      for (var i = 0; i < ctx.numPlayers; i++) {
        var playerState = {};

        if (game.playerSetup !== undefined) {
          playerState = game.playerSetup(i + '');
        }

        players[i + ''] = playerState;
      }

      return _objectSpread2({}, _G2, {
        players: players
      });
    }
  }
};

export { pluginPlayer as PluginPlayer };
